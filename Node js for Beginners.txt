Node.js for Beginners
source > https://www.youtube.com/watch?v=U8XF6AFGqlc
				 https://www.w3schools.com/nodejs

Concepts:
1. What is Node.js and how does it work?
	-JavaScript runtime built on Chrome's V8 JavaScript engine. 
		*V8 is Google open source high-performance JavaScript engine, written in C++ and used in Google Chrome.
	-JavaScript running on the server.
	-Used to build powerful, fast and scalable web apps
	-Uses an event-driven, non-blocking I/O model
		*Non-blocking I/O:
			+Works on a single thread using non-blocking I/O calls
			+Supports tens of thousands concurrent connections
			+Optimizes throughput and scalability in web app with many I/O operations
			+This makes Node.js apps extremely fast and efficient
	**Traditional server connections are synchronous, Node.js is asynchronous  

2. What can we build with Node.js?
	-REST APIs and Backend Applications
	-Real-Time Services (Chat, Games, etc)
	-Blogs, CMS, Social Applications
	-Utilities and Tools
	-Anything that is not CPU-intensive
	
3. What is NPM?
	-Stands for Node.js Package Manager
	-Used to install node programs/modules
	-Easy to specify and link dependencies
	-Modules get installed into the "node_modules" folder
	i.g Basic commands:
		>npm install express  		//this will install express module into node_modules folder. If the node_modules doesn't exist, it will create one for us.
		>npm install -g express 	//this will install express module globally, accessible for any application.

4. Popular Modules
	-Express : Web development framework
	-Connect : Extensible HTTP server framework
	-Socket.io : Server side component for websockets 
		*websocket -> Bi-directional and full-duplex communication channel over a single TCP connection.
	-Pug/Jade : Template engine inspired by HAML. Default template for Express.
	-Mongo/Mongoose : Wrappers to interact with MongoDB
	-Coffee-Script : CoffeeScript compiler
	-Redis : Redis client library. Kind of NoSQL database, use as cache system. 

5. package.json File
	-Goes in the root of your package/application
	-Tells npm how your package is structured and what to do to install it
	-Command to run it: 
		>npm init
	i.e of package:
		{
			"name" : "mytasklist",
			"version" : "1.0.0",
			"description" : "Simple Task Manager",
			"main" : "server.js", 					//entry point for your application. In this case is server.js, but could be app.js, index.js, ect
			"author" : "<your name>",
			"license" : "ISC",
			"dependencies" : {						//here is where you write all your modules 
				"body-parser" : "^1.15.2",
				"express" : "^4.14.0",
				"mongojs" : "^2.4.0"
			}
		}
	
6. Installing Node.js
	-Download node.js from https://nodejs.org/en/
	-After install, you can go to the program file folder, and you will find a node.exe which allow you write javascript without the browser on a command line shell.
	-Also you can open windows command line and write:
	>node  //that will give you the same functionality as node.exe 
	
7. Making some dummy examples.
	-Create a folder i.e named Test, and inside create a app.js file.
	-Open the app.js file with a text editor. 
	-Open cmd or git bash shell script, and go to the Test folder location, and write >node app.js. This will allows you to see the output from your code in app.js. i.e functions like console.log();

8. Steps for a simple web server application using node.js
	1- Create your package.json => Look at sptep no.5
	2-Set configuration server on app.js => Refer to app.js file
	3-To start the server through command line:
	>node app.js or >node app   //For the seek of this example app.js is the name for the file configuration 
	4-To stop the server just type ctrl + c on commmand line. Every time that you make a change you need to stop and restart the server.  
